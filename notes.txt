PRIMERA Entrega 15/12 notas

1. El objetivo del proyecto es crear una web donde se sume ingresos y gastos, para poder calcular el presupuesto del hogar.

También me gustaría agregar el balance de forma dinámica y que los datos queden guardados en el sistema, para luego poder agregar gráficos y otros calculos (necesito más conocimiento para esto). Balance por tipo de gasto, en la parte inferior de formaulario_presupuesto.html no está resuelto. 

2. La web tiene una primera página que valida datos y permite logguearse. 

3. Al entrar, se deben ingresar los datos username === "hfavat"  email === "h.favat@gmail.com" && password === "123456" para que permita loguearse. 

4. Para poder hacer este primer boceto funcional, he tenido que investigar sobre document.getElementById para poder connectar el html con JS, y addEventListener para poder actualizar la información en el html una vez ingresado el input. 

Si bien esto no se ha visto aún en clase, me ha permitido resolver el problema y la web se ejecuta como lo había pensado. 

-------------------------------------------------------------------------------------------

SEGUNDA Entrega 12/22 notas 

1. He agregado la clase Usuario para guardar toda la info que se ingrese en los inputs (user name, email y password) creando así una mini base de datos. 

2. Tuve que investigar que metodo usar para guardar el usuario validado, ya que no me vinculaba la clase loggin con la de Usuarios al pasar la condición que te hace loguarte y pasar de página. He usado el método Object.assign. De esta forma me actualiza el array. 

3. He configurado los intentos validos hasta 3, al no poder integrar un FOR or WHILE para gestionarlo, he podido encontrar una forma que parece más sensilla, inicialicé los attempts:

class Loggin {
    constructor() {
        // Inicializamos las propiedades de los intentos
        this.attempts = 0;
        this.maxAttempts = 3;
    }
}

Y luego le pase la condición dentro de la funcion IralFormulario() :

if (this.attempts === this.maxAttempts) {
                alert("Has alcanzado la cantidad de intentos. Tu cuenta queda bloqueada por 24 hrs, intentalo más tarde, por favor!.");}

4. Queda pendiente:
    4.a) DEjar bloqueado el acceso por cierta cantidad de tiempo (en mi alert son 24 hrs, pero podrían ser 15 minutos luego de 3 intentos)

    4.b) No he podido guardar el intento correcto username === "hfavat"  email === "h.favat@gmail.com" && password === "123456" en el array. Necesito entender porque me borra la consola y me imprimi lo de la nueva pagina. 


    -------------------------------------------------------------------------------------------
    TERCERA Entrega 17/01 notas 

    1. EN esta entrega sigo trabajando más la parte del Acceso al usuario a su cuenta, agregando algunas de las cosas que hemos estado viendo. Aquí podrás ver aplicado, sweetalert combinados con setTimeout así como también storage de la info de usuario validado.   

    2. El uso de sweetalert lo combine con setTimeOut porque si no desaparecia muy rápido al pasar de una página a otra, por lo que el USE CASE para testearlo quedaría así:

       *  Si le das al boton Acceso Cliente sin ingresar datos, aparece un pop up informativo "Debes ingresar los datos solicitados para loguearte en tu cuenta" con el link (que aun no funciona) para sugerirte de crear una cuenta. 

       * Si ingresas credenciales incorrectas, las 3 primeras veces aparecerá un pop up de error "Por favor ingresa los datos correctos para loguearte" con el link (que aun no funciona) para sugerirte de crear una cuenta. 

       * A la 4 vez que lo intentas, incorporé otro pop up de bloqueo de cuenta, no hay código que sustente el bloqueo de cuenta obviamente, no se como se gestiona esto realmente de todas formas a nivel de código y de seguridad. Pero el pop up está incorporado y respeta la condición. 

       * Si ingresas los datos correctos  nombreDeUsuarioInput === "hfavat" && emailInput === "h.favat@gmail.com" && contraseñaInput === "123456", un nuevo pop up te pedirá si quieres guardar los datos, si selecionas "Guardar" Nombre de Usuario y email quedarán guardados y estarás logueado, si seleccionas "No, gracias" los datos no se guardan en los inputs pero estarás igualmente logueado. 

       * Lo que no he podido aun resolver es el boton OKA, una vez has puesto "Guardar" o "No, Gracias". Es decir, va a la nueva pagina aunque no lo aceptes, entiendo que allí falta una condición. 

    3. He actualizado todos los nombres que me has sugerido, pasado todo a español he intentando tener mejores nombres para variables, etc. Aunque todavía creo que puede ser mejorable. 

    4. Tengo la sensación de que puede haber cosas redundantes en el código o maneras de simplificarlo, algunas de las que hemos visto, por lo cual cualquier feedback bienvenido. 


    -------------------------------------------------------------------------------------------
    TERCERA Entrega 03/02 notas

    1. En esta entrega he estado trabajando loggin, la página de crear cuenta, y el formulario para el presupuesto, así como también probando cosas en CSS, pero claramente necesito trabajar en eso. 

    1a. Loggin: habilité el btn crear cuenta, el resto del código y la validación se mantienen como fue explicado en mi ultima presentanción. 

    1b. Crear Cuenta, hago fetch para conectar con la API de usuarios en https://jsonplaceholder.typicode.com/users, la idea es simular una base de datos y que en función de eso te permite crear o no una cuenta. 
    
    Por ejemplo, si quieres crear una cuenta con el email Nathan@yesenia.net te saldrá un pop up comentando que ese email ya existe. Creando una cuenta con otra info te dejará pasar al formulario de presupuesto. registeredUser quedada guardado en storage con la info del usuario, si bien hice está acción la idea era poder incluir en el formulario presupuesto el nombre del usuario como un pequeño titulo arriba a la derecha.No está implementado. 

    1.c El formulario presupuesto es lo más complejo que he intentado hacer, y la verdad me ha demandado demasiado tiempo para resolver, no está resuelto 100 %. La idea es usar un port local 3000 que permite guardar la información que va calculando el formulario al ingresar datos. El formulario suma, y resta, al cliquear en guardar datos te indica el mes en el que los datos están guardados.

    El problema que encontré acá es que no he podido hacer el valor total ingresos, gastos y balance se guarden siempren, y que al limpiar los imputs de valores y volver agregar valores esta información se sume a los totales, en el file Underfined de la carpeta Data si lo hace y lo suma, sin emabargo el file data_February.json ha guardado información que no tengo ni idea que es. 

    Si activas el server local, el formulario guarda la info y realiza conección. He creado el server.js para eso 